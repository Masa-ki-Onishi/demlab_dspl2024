// Generated by gencpp from file move_pkg/NaviCoordRequest.msg
// DO NOT EDIT!


#ifndef MOVE_PKG_MESSAGE_NAVICOORDREQUEST_H
#define MOVE_PKG_MESSAGE_NAVICOORDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace move_pkg
{
template <class ContainerAllocator>
struct NaviCoordRequest_
{
  typedef NaviCoordRequest_<ContainerAllocator> Type;

  NaviCoordRequest_()
    : loc_coord()  {
    }
  NaviCoordRequest_(const ContainerAllocator& _alloc)
    : loc_coord(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _loc_coord_type;
  _loc_coord_type loc_coord;





  typedef boost::shared_ptr< ::move_pkg::NaviCoordRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_pkg::NaviCoordRequest_<ContainerAllocator> const> ConstPtr;

}; // struct NaviCoordRequest_

typedef ::move_pkg::NaviCoordRequest_<std::allocator<void> > NaviCoordRequest;

typedef boost::shared_ptr< ::move_pkg::NaviCoordRequest > NaviCoordRequestPtr;
typedef boost::shared_ptr< ::move_pkg::NaviCoordRequest const> NaviCoordRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_pkg::NaviCoordRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_pkg::NaviCoordRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::move_pkg::NaviCoordRequest_<ContainerAllocator1> & lhs, const ::move_pkg::NaviCoordRequest_<ContainerAllocator2> & rhs)
{
  return lhs.loc_coord == rhs.loc_coord;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::move_pkg::NaviCoordRequest_<ContainerAllocator1> & lhs, const ::move_pkg::NaviCoordRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace move_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::move_pkg::NaviCoordRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_pkg::NaviCoordRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_pkg::NaviCoordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_pkg::NaviCoordRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_pkg::NaviCoordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_pkg::NaviCoordRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_pkg::NaviCoordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06aaf524d004b42fe9541758311ce6dc";
  }

  static const char* value(const ::move_pkg::NaviCoordRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06aaf524d004b42fULL;
  static const uint64_t static_value2 = 0xe9541758311ce6dcULL;
};

template<class ContainerAllocator>
struct DataType< ::move_pkg::NaviCoordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_pkg/NaviCoordRequest";
  }

  static const char* value(const ::move_pkg::NaviCoordRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_pkg::NaviCoordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# req\n"
"float32[] loc_coord\n"
;
  }

  static const char* value(const ::move_pkg::NaviCoordRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_pkg::NaviCoordRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.loc_coord);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NaviCoordRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_pkg::NaviCoordRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_pkg::NaviCoordRequest_<ContainerAllocator>& v)
  {
    s << indent << "loc_coord[]" << std::endl;
    for (size_t i = 0; i < v.loc_coord.size(); ++i)
    {
      s << indent << "  loc_coord[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.loc_coord[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_PKG_MESSAGE_NAVICOORDREQUEST_H
