// Generated by gencpp from file detic_pkg/Data.msg
// DO NOT EDIT!


#ifndef DETIC_PKG_MESSAGE_DATA_H
#define DETIC_PKG_MESSAGE_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/RegionOfInterest.h>

namespace detic_pkg
{
template <class ContainerAllocator>
struct Data_
{
  typedef Data_<ContainerAllocator> Type;

  Data_()
    : class_ids()
    , class_name()
    , xyz()
    , boxes()  {
    }
  Data_(const ContainerAllocator& _alloc)
    : class_ids(_alloc)
    , class_name(_alloc)
    , xyz(_alloc)
    , boxes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _class_ids_type;
  _class_ids_type class_ids;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _class_name_type;
  _class_name_type class_name;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _xyz_type;
  _xyz_type xyz;

   typedef std::vector< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >> _boxes_type;
  _boxes_type boxes;





  typedef boost::shared_ptr< ::detic_pkg::Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detic_pkg::Data_<ContainerAllocator> const> ConstPtr;

}; // struct Data_

typedef ::detic_pkg::Data_<std::allocator<void> > Data;

typedef boost::shared_ptr< ::detic_pkg::Data > DataPtr;
typedef boost::shared_ptr< ::detic_pkg::Data const> DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detic_pkg::Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detic_pkg::Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detic_pkg::Data_<ContainerAllocator1> & lhs, const ::detic_pkg::Data_<ContainerAllocator2> & rhs)
{
  return lhs.class_ids == rhs.class_ids &&
    lhs.class_name == rhs.class_name &&
    lhs.xyz == rhs.xyz &&
    lhs.boxes == rhs.boxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detic_pkg::Data_<ContainerAllocator1> & lhs, const ::detic_pkg::Data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detic_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::detic_pkg::Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detic_pkg::Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detic_pkg::Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detic_pkg::Data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detic_pkg::Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detic_pkg::Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detic_pkg::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f65e8c43aa92c738d02da52bdabbf691";
  }

  static const char* value(const ::detic_pkg::Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf65e8c43aa92c738ULL;
  static const uint64_t static_value2 = 0xd02da52bdabbf691ULL;
};

template<class ContainerAllocator>
struct DataType< ::detic_pkg::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detic_pkg/Data";
  }

  static const char* value(const ::detic_pkg::Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detic_pkg::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# class_ids\n"
"int32[] class_ids\n"
"\n"
"# class_name\n"
"string[] class_name\n"
"\n"
"# xyz\n"
"float64[] xyz\n"
"\n"
"# Bounding boxes in pixels\n"
"sensor_msgs/RegionOfInterest[] boxes\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/RegionOfInterest\n"
"# This message is used to specify a region of interest within an image.\n"
"#\n"
"# When used to specify the ROI setting of the camera when the image was\n"
"# taken, the height and width fields should either match the height and\n"
"# width fields for the associated image; or height = width = 0\n"
"# indicates that the full resolution image was captured.\n"
"\n"
"uint32 x_offset  # Leftmost pixel of the ROI\n"
"                 # (0 if the ROI includes the left edge of the image)\n"
"uint32 y_offset  # Topmost pixel of the ROI\n"
"                 # (0 if the ROI includes the top edge of the image)\n"
"uint32 height    # Height of ROI\n"
"uint32 width     # Width of ROI\n"
"\n"
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n"
"# ROI in this message. Typically this should be False if the full image\n"
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n"
"# used).\n"
"bool do_rectify\n"
;
  }

  static const char* value(const ::detic_pkg::Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detic_pkg::Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_ids);
      stream.next(m.class_name);
      stream.next(m.xyz);
      stream.next(m.boxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detic_pkg::Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detic_pkg::Data_<ContainerAllocator>& v)
  {
    s << indent << "class_ids[]" << std::endl;
    for (size_t i = 0; i < v.class_ids.size(); ++i)
    {
      s << indent << "  class_ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.class_ids[i]);
    }
    s << indent << "class_name[]" << std::endl;
    for (size_t i = 0; i < v.class_name.size(); ++i)
    {
      s << indent << "  class_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name[i]);
    }
    s << indent << "xyz[]" << std::endl;
    for (size_t i = 0; i < v.xyz.size(); ++i)
    {
      s << indent << "  xyz[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.xyz[i]);
    }
    s << indent << "boxes[]" << std::endl;
    for (size_t i = 0; i < v.boxes.size(); ++i)
    {
      s << indent << "  boxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "    ", v.boxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETIC_PKG_MESSAGE_DATA_H
