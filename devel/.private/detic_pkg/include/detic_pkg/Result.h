// Generated by gencpp from file detic_pkg/Result.msg
// DO NOT EDIT!


#ifndef DETIC_PKG_MESSAGE_RESULT_H
#define DETIC_PKG_MESSAGE_RESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/RegionOfInterest.h>
#include <sensor_msgs/Image.h>

namespace detic_pkg
{
template <class ContainerAllocator>
struct Result_
{
  typedef Result_<ContainerAllocator> Type;

  Result_()
    : header()
    , boxes()
    , class_ids()
    , class_names()
    , scores()
    , masks()
    , xy()  {
    }
  Result_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , boxes(_alloc)
    , class_ids(_alloc)
    , class_names(_alloc)
    , scores(_alloc)
    , masks(_alloc)
    , xy(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >> _boxes_type;
  _boxes_type boxes;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _class_ids_type;
  _class_ids_type class_ids;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _class_names_type;
  _class_names_type class_names;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _scores_type;
  _scores_type scores;

   typedef std::vector< ::sensor_msgs::Image_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::sensor_msgs::Image_<ContainerAllocator> >> _masks_type;
  _masks_type masks;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _xy_type;
  _xy_type xy;





  typedef boost::shared_ptr< ::detic_pkg::Result_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detic_pkg::Result_<ContainerAllocator> const> ConstPtr;

}; // struct Result_

typedef ::detic_pkg::Result_<std::allocator<void> > Result;

typedef boost::shared_ptr< ::detic_pkg::Result > ResultPtr;
typedef boost::shared_ptr< ::detic_pkg::Result const> ResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detic_pkg::Result_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detic_pkg::Result_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detic_pkg::Result_<ContainerAllocator1> & lhs, const ::detic_pkg::Result_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.boxes == rhs.boxes &&
    lhs.class_ids == rhs.class_ids &&
    lhs.class_names == rhs.class_names &&
    lhs.scores == rhs.scores &&
    lhs.masks == rhs.masks &&
    lhs.xy == rhs.xy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detic_pkg::Result_<ContainerAllocator1> & lhs, const ::detic_pkg::Result_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detic_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::detic_pkg::Result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detic_pkg::Result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detic_pkg::Result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detic_pkg::Result_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detic_pkg::Result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detic_pkg::Result_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detic_pkg::Result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c8b9b51433524a2661ae985d6dfa2ab";
  }

  static const char* value(const ::detic_pkg::Result_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c8b9b51433524a2ULL;
  static const uint64_t static_value2 = 0x661ae985d6dfa2abULL;
};

template<class ContainerAllocator>
struct DataType< ::detic_pkg::Result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detic_pkg/Result";
  }

  static const char* value(const ::detic_pkg::Result_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detic_pkg::Result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# Bounding boxes in pixels\n"
"sensor_msgs/RegionOfInterest[] boxes\n"
"\n"
"# Integer class IDs for each bounding box\n"
"int32[] class_ids\n"
"\n"
"# String class IDs for each bouding box\n"
"string[] class_names\n"
"\n"
"# Float probability scores of the class_id\n"
"float32[] scores\n"
"\n"
"# Instance masks as Image\n"
"sensor_msgs/Image[] masks\n"
"\n"
"# xy\n"
"int32[] xy\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/RegionOfInterest\n"
"# This message is used to specify a region of interest within an image.\n"
"#\n"
"# When used to specify the ROI setting of the camera when the image was\n"
"# taken, the height and width fields should either match the height and\n"
"# width fields for the associated image; or height = width = 0\n"
"# indicates that the full resolution image was captured.\n"
"\n"
"uint32 x_offset  # Leftmost pixel of the ROI\n"
"                 # (0 if the ROI includes the left edge of the image)\n"
"uint32 y_offset  # Topmost pixel of the ROI\n"
"                 # (0 if the ROI includes the top edge of the image)\n"
"uint32 height    # Height of ROI\n"
"uint32 width     # Width of ROI\n"
"\n"
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n"
"# ROI in this message. Typically this should be False if the full image\n"
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n"
"# used).\n"
"bool do_rectify\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
;
  }

  static const char* value(const ::detic_pkg::Result_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detic_pkg::Result_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.boxes);
      stream.next(m.class_ids);
      stream.next(m.class_names);
      stream.next(m.scores);
      stream.next(m.masks);
      stream.next(m.xy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Result_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detic_pkg::Result_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detic_pkg::Result_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "boxes[]" << std::endl;
    for (size_t i = 0; i < v.boxes.size(); ++i)
    {
      s << indent << "  boxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "    ", v.boxes[i]);
    }
    s << indent << "class_ids[]" << std::endl;
    for (size_t i = 0; i < v.class_ids.size(); ++i)
    {
      s << indent << "  class_ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.class_ids[i]);
    }
    s << indent << "class_names[]" << std::endl;
    for (size_t i = 0; i < v.class_names.size(); ++i)
    {
      s << indent << "  class_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_names[i]);
    }
    s << indent << "scores[]" << std::endl;
    for (size_t i = 0; i < v.scores.size(); ++i)
    {
      s << indent << "  scores[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.scores[i]);
    }
    s << indent << "masks[]" << std::endl;
    for (size_t i = 0; i < v.masks.size(); ++i)
    {
      s << indent << "  masks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "    ", v.masks[i]);
    }
    s << indent << "xy[]" << std::endl;
    for (size_t i = 0; i < v.xy.size(); ++i)
    {
      s << indent << "  xy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.xy[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETIC_PKG_MESSAGE_RESULT_H
